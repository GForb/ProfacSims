---
title: "Prediction with new data for intercept - Supplementary material part 2"
format: 
  html:
    number-sections: True
    fig-height: 10
    fig-width: 8
editor: visual
execute: 
  echo: FALSE

---

```{r include = FALSE}
library(tidyverse)
library(ggplot2)
library(DBI)
library(RSQLite)
library(here)
library(glue)

# Loading files:
sim_name <- "240211_cluster-x"
results_folder <- here("Results", "Database-extracts", sim_name)



```

## Calibration in the large
```{R}
calib_itl <- readRDS(file = here(results_folder, "calib_itl.RDS")) |> 
  filter(model != "Random intercept - ML", model != "Hausman - centred") |> 
  ProfacSims:::correct_model_spelling()

```

```{r echo = FALSE}
calib_itl$plot_value = calib_itl$est
plot <- calib_itl |> 
    ProfacSims:::box_plot_cluster_x() +
    ylab(glue("Calibration In the Large")) 
  
  
  print(plot)

```
### Estimates
```{r calib_itl_est}

for(my_n_studies in c(4,8,16,32,64)){
     plot_data <- calib_itl_stacked |> 
           filter(
             predict_method != "new_dynamic", 
             n_studies ==my_n_studies) 

          plot <- plot_data |> 
            ProfacSims:::box_plot_by_pred_ss_supp(what = "est") # 
          
          plot <- plot + 
            labs(
              title = "Calibration in the large",
              subtitle = glue("Training data: {my_n_studies} studies")
            ) +
            ylab("Calibration in the large")
          print(plot)
      
  
    
}     
       
```


### Hetrogeneity
```{r calib_itl_hetro}

for(my_n_studies in c(4,8,16,32,64)){
     plot_data <- calib_itl_stacked |> 
           filter(
             predict_method != "new_dynamic", 
             n_studies ==my_n_studies) 

          plot <- plot_data |> 
            ProfacSims:::box_plot_by_pred_ss_supp(what = "tau") #
          
          plot <- plot + 
            labs(
              title = "Hetrogeneity in Calibration in the large",
              subtitle = glue("Training data: {my_n_studies} studies")
            ) +
            ylab("Tau")
          print(plot)
      
  
    
}     
       
```

## Calibration Slope
```{R}
calib_slope_stacked <- readRDS(file = here(results_folder, "calib_slope_stacked.RDS"))

```


### Estimates
```{r calib_slope_est}

for(my_n_studies in c(4,8,16,32,64)){
     plot_data <- calib_slope_stacked |> 
           filter(
             predict_method != "new_dynamic", 
             n_studies ==my_n_studies) 

          plot <- plot_data |> 
            ProfacSims:::box_plot_by_pred_ss_supp(what = "est") # 
          
          plot <- plot + 
            labs(
              title = "Calibration Slope",
              subtitle = glue("Training data: {my_n_studies} studies")
            ) +
            ylab("Calibration Slope")
          print(plot)
      
  
    
}     
       
```


### Hetrogeneity
```{r calib_slope_hetro}

for(my_n_studies in c(4,8,16,32,64)){
     plot_data <- calib_slope_stacked |> 
           filter(
             predict_method != "new_dynamic", 
             n_studies ==my_n_studies) 

          plot <- plot_data |> 
            ProfacSims:::box_plot_by_pred_ss_supp(what = "tau") #
          
          plot <- plot + 
            labs(
              title = "Hetrogeneity in Calibration Slope",
              subtitle = glue("Training data: {my_n_studies} studies")
            ) +
            ylab("Tau")
          print(plot)
      
  
    
}     
       
```



## R-squared
```{R}
r_squared_stacked <- readRDS(file = here(results_folder, "r_squared_stacked.RDS"))
```


### Estimates
```{r r_squared_est, warning = FALSE}

for(my_n_studies in c(4,8,16,32,64)){
     plot_data <- r_squared_stacked |> 
           filter(
             predict_method != "new_dynamic", 
             n_studies ==my_n_studies) 

          plot <- plot_data |> 
            ProfacSims:::box_plot_by_pred_ss_supp(what = "est") # 
          
          plot <- plot + 
            labs(
              title = "R-Squared",
              subtitle = glue("Training data: {my_n_studies} studies")
            ) +
            ylab("R-Squared") +
            scale_y_continuous(limits = c(0, NA))
          print(plot)
      
  
    
}     
       
```


### Hetrogeneity
```{r r_squared_hetro, warning = FALSE}

for(my_n_studies in c(4,8,16,32,64)){
     plot_data <- r_squared_stacked |> 
           filter(
             predict_method != "new_dynamic", 
             n_studies ==my_n_studies) 

          plot <- plot_data |> 
            ProfacSims:::box_plot_by_pred_ss_supp(what = "tau") #
          
          plot <- plot + 
            labs(
              title = "Hetrogeneity in R-Squared",
              subtitle = glue("Training data: {my_n_studies} studies")
            ) +
            ylab("Tau")
          print(plot)
      
  
    
}     
       
```



